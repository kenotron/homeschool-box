version: "3.8"
services:
  # app: 
  #   container_name: app
  #   build: ./app
  #   image: app:latest
  #   restart: unless-stopped
  #   environment:
  #     DATABASE_CLIENT: ${DATABASE_CLIENT}
  #     DATABASE_HOST: ${POSTGRES_HOST}
  #     DATABASE_NAME: ${POSTGRES_DB}
  #     DATABASE_USERNAME: ${POSTGRES_USER}
  #     DATABASE_PORT: ${POSTGRES_PORT}
  #     DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
  #     NODE_ENV: ${STRAPI_NODE_ENV}
  #     STRAPI_HOST: ${STRAPI_HOST}
  #     STRAPI_PORT: ${STRAPI_PORT}
  #   ports:
  #     - 3000:3000
  #   depends_on:
  #     - db: # Disable this if you are using an external Postgres database
  #         condition: service_healthy
  #     - cms

  cms:
    container_name: cms
    build: ./cms
    image: cms:latest
    restart: unless-stopped
    env_file: .env
    environment:
      DATABASE_CLIENT: ${DATABASE_CLIENT}
      DATABASE_HOST: ${POSTGRES_HOST}
      DATABASE_NAME: ${POSTGRES_DB}
      DATABASE_USERNAME: ${POSTGRES_USER}
      DATABASE_PORT: ${POSTGRES_PORT}
      DATABASE_SCHEMA: cms
      JWT_SECRET: ${JWT_SECRET}
      ADMIN_JWT_SECRET: ${ADMIN_JWT_SECRET}
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
      NODE_ENV: ${STRAPI_NODE_ENV}
      HOST: ${STRAPI_HOST}
      PORT: ${STRAPI_PORT}
    volumes:
      - ./cms/config:/opt/app/config
      - ./cms/src:/opt/app/src
      - ./cms/package.json:/opt/package.json
      - ./cms/yarn.lock:/opt/yarn.lock
      - ./cms/.env:/opt/app/.env
      - ./cms/public/uploads:/opt/app/public/uploads
    ports:
      - ${STRAPI_PORT}:${STRAPI_PORT}
    depends_on:
      db:
        condition: service_healthy

  db:
    restart: unless-stopped
    container_name: db
    image: postgres:14
    ports:
      # Pass down internal port because it's set dynamically by other services
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    healthcheck:
      test: pg_isready -U postgres -h localhost
      interval: 5s
      timeout: 5s
      retries: 10
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./volumes/db/data:/var/lib/postgresql/data
      - ./initdb/create_schema_app.sql:/docker-entrypoint-initdb.d/create_schema_app.sql
      - ./initdb/create_schema_auth.sql:/docker-entrypoint-initdb.d/create_schema_auth.sql
      - ./initdb/create_schema_cms.sql:/docker-entrypoint-initdb.d/create_schema_cms.sql

  fusionauth:
    container_name: auth
    image: fusionauth/fusionauth-app:latest
    depends_on:
      db:
        condition: service_healthy
    environment:
      DATABASE_URL: jdbc:postgresql://db:5432/postgres?currentSchema=auth
      DATABASE_ROOT_USERNAME: ${POSTGRES_USER}
      DATABASE_ROOT_PASSWORD: ${POSTGRES_PASSWORD}
      DATABASE_USERNAME: ${POSTGRES_USER}
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
      FUSIONAUTH_APP_MEMORY: ${FUSIONAUTH_APP_MEMORY}
      FUSIONAUTH_APP_RUNTIME_MODE: development
      FUSIONAUTH_APP_URL: http://fusionauth:9011
      # SEARCH_SERVERS: http://search:9200
      SEARCH_TYPE: database
    restart: unless-stopped
    ports:
      - 9011:9011
    volumes:
      - ./volumes/fusionauth:/usr/local/fusionauth/config

  pgadmin:
    restart: unless-stopped
    container_name: pgadmin
    image: dpage/pgadmin4
    ports:
      - 5433:80
    environment:
      PGADMIN_DEFAULT_EMAIL: ken@gizzar.com
      PGADMIN_DEFAULT_PASSWORD: password
